apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: ingester
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/name: cortex
    app.kubernetes.io/part-of: memberlist
  name: cortex-ingester
  namespace: monitoring
spec:
  progressDeadlineSeconds: 600
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/component: ingester
      app.kubernetes.io/instance: cortex
      app.kubernetes.io/name: cortex
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:      
      annotations:
        prometheus.io/port: http-metrics
        prometheus.io/scrape: ""
      labels:
        app.kubernetes.io/component: ingester
        app.kubernetes.io/instance: cortex
        app.kubernetes.io/name: cortex
        app.kubernetes.io/part-of: memberlist
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: target
                  operator: In
                  values:
                  - ingester
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - args:
        - -target=ingester
        - -config.file=/etc/cortex/cortex.yaml
        - -s3.url=s3://admin:admin2675@172.31.14.138:9000/monitoring
        - -s3.force-path-style=true
        - -store.chunks-cache.memcached.addresses=dns+memcached.monitoring.svc.cluster.local:11211
        image: quay.io/cortexproject/cortex:v1.9.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /ready
            port: http-metrics
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: cortex
        ports:
        - containerPort: 8080
          name: http-metrics
          protocol: TCP
        - containerPort: 7946
          name: gossip
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /ready
            port: http-metrics
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        securityContext:
          readOnlyRootFilesystem: true
        startupProbe:
          failureThreshold: 60
          httpGet:
            path: /ready
            port: http-metrics
            scheme: HTTP
          initialDelaySeconds: 120
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/cortex
          name: config
        - mountPath: /data
          name: storage
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: cortex
      serviceAccountName: cortex
      terminationGracePeriodSeconds: 240
      volumes:
      - name: config
        configMap:
          name: cortex
      - emptyDir: {}
        name: storage
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: ingester
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/name: cortex
  name: cortex-ingester-headless
  namespace: monitoring
spec:
  clusterIP: None
  clusterIPs:
  - None
  ports:
  - name: http-metrics
    port: 8080
    protocol: TCP
    targetPort: http-metrics
  selector:
    app.kubernetes.io/component: ingester
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/name: cortex
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/name: cortex
  name: cortex-memberlist
  namespace: monitoring
spec:
  clusterIP: None
  clusterIPs:
  - None
  ports:
  - name: gossip
    port: 7946
    protocol: TCP
    targetPort: gossip
  selector:
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/name: cortex
    app.kubernetes.io/part-of: memberlist
  sessionAffinity: None
  type: ClusterIP
