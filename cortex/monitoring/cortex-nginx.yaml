apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: nginx
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/name: cortex
  name: cortex-nginx
  namespace: monitoring
data:
  nginx.conf: |-
    worker_processes  5;  ## Default: 1
    error_log  /dev/stderr;
    pid        /tmp/nginx.pid;
    worker_rlimit_nofile 8192;

    events {
      worker_connections  4096;  ## Default: 1024
    }


    http {
      default_type application/octet-stream;
      client_max_body_size 1M;
      log_format   main '$remote_addr - $remote_user [$time_local]  $status '
        '"$request" $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for" $http_x_scope_orgid';
      access_log   /dev/stderr  main;
      sendfile     on;
      tcp_nopush   on;
      resolver kube-dns.kube-system.svc.cluster.local;

      server { # simple reverse-proxy
        listen 80;
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        proxy_http_version 1.1;

        location = /healthz {
          return 200 'alive';
        }

        # Distributor Config
        location = /ring {
          proxy_pass      http://cortex-distributor.monitoring.svc.cluster.local:8080$request_uri;
        }

        location = /all_user_stats {
          proxy_pass      http://cortex-distributor.monitoring.svc.cluster.local:8080$request_uri;
        }

        location = /api/prom/push {
          proxy_pass      http://cortex-distributor.monitoring.svc.cluster.local:8080$request_uri;
        }

        ## New Remote write API. Ref: https://cortexmetrics.io/docs/api/#remote-write
        location = /api/v1/push {
          proxy_pass      http://cortex-distributor.monitoring.svc.cluster.local:8080$request_uri;
        }


        # Alertmanager Config
        location ~ /api/prom/alertmanager/.* {
          proxy_pass      http://cortex-alertmanager.monitoring.svc.cluster.local:8080$request_uri;
        }

        location ~ /api/v1/alerts {
          proxy_pass      http://cortex-alertmanager.monitoring.svc.cluster.local:8080$request_uri;
        }

        location ~ /multitenant_alertmanager/status {
          proxy_pass      http://cortex-alertmanager.monitoring.svc.cluster.local:8080$request_uri;
        }

        # Ruler Config
        location ~ /api/v1/rules {
          proxy_pass      http://cortex-ruler.monitoring.svc.cluster.local:8080$request_uri;
        }

        location ~ /ruler/ring {
          proxy_pass      http://cortex-ruler.monitoring.svc.cluster.local:8080$request_uri;
        }

        # Config Config
        location ~ /api/prom/configs/.* {
          proxy_pass      http://cortex-configs.monitoring.svc.cluster.local:8080$request_uri;
        }

        # Query Config
        location ~ /api/prom/.* {
          proxy_pass      http://cortex-query-frontend.monitoring.svc.cluster.local:8080$request_uri;
        }

        ## New Query frontend APIs as per https://cortexmetrics.io/docs/api/#querier--query-frontend
        location ~ ^/prometheus/api/v1/(read|metadata|labels|series|query_range|query) {
          proxy_pass      http://cortex-query-frontend.monitoring.svc.cluster.local:8080$request_uri;
        }

        location ~ /prometheus/api/v1/label/.* {
          proxy_pass      http://cortex-query-frontend.monitoring.svc.cluster.local:8080$request_uri;
        }

      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: nginx
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/name: cortex
  name: cortex-nginx
  namespace: monitoring
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: nginx
      app.kubernetes.io/instance: cortex
      app.kubernetes.io/name: cortex
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: http-metrics
        prometheus.io/scrape: ""
      labels:
        app.kubernetes.io/component: nginx
        app.kubernetes.io/instance: cortex
        app.kubernetes.io/name: cortex
    spec:
      affinity: {}
      containers:
      - image: nginx:1.21
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: http-metrics
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: nginx
        ports:
        - containerPort: 80
          name: http-metrics
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: http-metrics
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        securityContext:
          readOnlyRootFilesystem: false
        startupProbe:
          failureThreshold: 10
          httpGet:
            path: /healthz
            port: http-metrics
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/nginx
          name: config
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: cortex
      serviceAccountName: cortex
      terminationGracePeriodSeconds: 10
      volumes:
      - configMap:
          defaultMode: 420
          name: cortex-nginx
        name: config
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: nginx
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/name: cortex
  name: cortex-nginx
  namespace: monitoring
spec:
  clusterIP:
  clusterIPs:
  ports:
  - name: http-metrics
    port: 80
    protocol: TCP
    targetPort: http-metrics
  selector:
    app.kubernetes.io/component: nginx
    app.kubernetes.io/instance: cortex
    app.kubernetes.io/name: cortex
  sessionAffinity: None
  type: ClusterIP
